{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elias\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Elias\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from \"@angular/core\"; // import { ActivatedRoute } from '@angular/router';\n// import { HotelPK } from \"../../../../common/tables/HotelPK\";\n// import { Room } from \"../../../../common/tables/Room\";\n// import { Guest } from \"../../../../common/tables/Guest\";\n\nimport { CommunicationService } from \"../communication.service\";\n\nvar AddComponent = /*#__PURE__*/function () {\n  // public selectedHotel: HotelPK = {\n  //   hotelnb: \"-1\",\n  //   name: \"placeholderHotel\",\n  // };\n  // public selectedRoom: Room = {\n  //   hotelnb: \"-1\",\n  //   roomnb: \"-1\",\n  //   type: \"\",\n  //   price: 0\n  // }\n  function AddComponent(communicationService) {\n    _classCallCheck(this, AddComponent);\n\n    this.communicationService = communicationService;\n    this.statusOptions = [];\n    this.predatorOptions = [];\n    this.specie = {\n      nomscientifique: \"\",\n      nomcommun: \"\",\n      statutspeces: \"\",\n      nomscientifiquecomsommer: \"\"\n    };\n    this.duplicateError = false;\n    this.invalidSpeciePK = false;\n  }\n\n  return _createClass(AddComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.communicationService.getOptions().subscribe(function (optionsData) {\n        console.log(optionsData);\n        _this.statusOptions = optionsData.statuses.map(function (option, index) {\n          return {\n            id: index,\n            name: option\n          };\n        });\n        _this.predatorOptions = optionsData.predators.map(function (option, index) {\n          return {\n            id: index,\n            name: option\n          };\n        });\n\n        _this.predatorOptions.push({\n          id: _this.predatorOptions.length,\n          name: null\n        });\n      });\n    }\n  }, {\n    key: \"changeSpecieScientificName\",\n    value: function changeSpecieScientificName(event, specie) {\n      var editField = event.target.textContent;\n      console.log(editField);\n      specie.nomscientifique = editField;\n      console.log(specie.nomscientifique);\n    }\n  }, {\n    key: \"changeSpecieCommonName\",\n    value: function changeSpecieCommonName(event, specie) {\n      var editField = event.target.textContent;\n      specie.nomcommun = editField;\n    }\n  }, {\n    key: \"statusChange\",\n    value: function statusChange(statusId) {\n      this.specie.statutspeces = this.statusOptions[statusId].name;\n    }\n  }, {\n    key: \"predatorChange\",\n    value: function predatorChange(predatorId) {\n      this.specie.nomscientifiquecomsommer = this.predatorOptions[predatorId].name;\n    }\n  }, {\n    key: \"addSpecie\",\n    value: function addSpecie(specie) {\n      var _this2 = this;\n\n      if (specie.nomscientifiquecomsommer === \"\") {\n        specie.nomscientifiquecomsommer = null;\n      }\n\n      if (specie.nomcommun === \"\") {\n        specie.nomcommun = null;\n      }\n\n      if (specie.nomcommun === \"\") {\n        specie.nomcommun = null;\n      }\n\n      console.log(specie);\n      this.communicationService.addSpecie(specie).subscribe(function (result) {\n        if (result === 0) {\n          _this2.duplicateError = true;\n        } else {\n          _this2.duplicateError = false;\n        }\n      });\n    }\n  }]);\n}();\n\nAddComponent = __decorate([Component({\n  selector: \"app-room\",\n  templateUrl: \"./add.component.html\",\n  styleUrls: [\"./add.component.css\"]\n}), __metadata(\"design:paramtypes\", [CommunicationService])], AddComponent);\nexport { AddComponent }; //   public updateSelectedHotel(hotelID: any) {\n//     // this.selectedHotel = this.hotelPKs[hotelID];\n//     // this.getRooms();\n//     // this.refresh();\n//   }\n//   public getRooms(): void {\n//     // this.communicationService\n//     //   .getRooms(this.selectedHotel.hotelnb)\n//     //   .subscribe((rooms: Room[]) => {\n//     //     this.rooms = rooms;\n//     //   });\n//   }\n//   private refresh() {\n//     this.getRooms();\n//     this.newRoomNb.nativeElement.innerText = \"\";\n//     this.newRoomType.nativeElement.innerText = \"\";\n//     this.newRoomPrice.nativeElement.innerText = \"\";\n//   }\n//   public changeRoomType(event: any, i: number) {\n//     // const editField = event.target.textContent;\n//     // this.rooms[i].type = editField;\n//   }\n//   public changeRoomPrice(event: any, i: number) {\n//     // const editField = event.target.textContent;\n//     // this.rooms[i].price = editField;\n//   }\n//   public deleteRoom(hotelNb: string, roomNb: string) {\n//     this.communicationService\n//       .deleteRoom(hotelNb, roomNb)\n//       .subscribe((res: any) => {\n//         this.refresh();\n//       });\n//   }\n//   public insertRoom(): void {\n//     // const room: Room = {\n//     //   hotelnb: this.selectedHotel.hotelnb,\n//     //   roomnb: this.newRoomNb.nativeElement.innerText,\n//     //   type: this.newRoomType.nativeElement.innerText,\n//     //   price: this.newRoomPrice.nativeElement.innerText,\n//     // };\n//     // this.communicationService.insertRoom(room).subscribe((res: number) => {\n//     //   this.refresh();\n//     // });\n//   }\n//   public updateRoom(i: number) {\n//     // this.communicationService\n//     //   .updateRoom(this.rooms[i])\n//     //   .subscribe((res: any) => {\n//     //     this.refresh();\n//     //   });\n//   }\n//","map":null,"metadata":{},"sourceType":"module"}